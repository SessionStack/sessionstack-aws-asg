events { }

http {
  include /etc/nginx/mime.types;
  default_type  application/octet-stream;

  access_log /var/log/nginx/access.log;
  error_log /var/log/nginx/error.log;

  server {
    listen 2733;

    sendfile on;

    # Docker dns server
    resolver 127.0.0.11;

     location / {
        root /usr/src/public/platform;
        try_files $uri /platform/index.html;
    }

    location /player {
        root /usr/src/public;
        try_files $uri /player/index.html;
    }

    location /platform {
        alias /usr/src/public/platform;
    }

    location /common {
        alias /usr/src/public/common;
    }

    # find out if we can just remote it
    location = /favicon.ico {
        alias /usr/src/public/assets/favicon.ico;
    }

    location = /logo.png {
        alias /usr/src/public/assets/logo.png;
    }
    # end of removal

    location /assets {
        alias /usr/src/public/assets;
    }

    location /platform/rest_api {
        client_max_body_size 150M;
        rewrite /platform/rest_api/(.+) /api/$1 break;
        include uwsgi_params;
        uwsgi_pass unix:/var/run/sessionstack/platform.sock;
        uwsgi_read_timeout 300;
    }

    location /platform/api {
        rewrite /platform/api/(.+) /app/$1 break;
        include uwsgi_params;
        uwsgi_pass unix:/var/run/sessionstack/platform.sock;
        uwsgi_read_timeout 300;
    }

    location /platform/api/resources {
        rewrite /api/(.+) /app/$1 break;
        include uwsgi_params;
        uwsgi_pass unix:/var/run/sessionstack/platform.sock;
        uwsgi_read_timeout 300;

        uwsgi_intercept_errors on;
        error_page 302 = @redir;
    }

    location @redir {
        set $orig_loc $upstream_http_location;

        if ($orig_loc !~ '^http://example.com/resources/(.*)') {
            return 302 $orig_loc;
        }

        proxy_pass http://127.0.0.1:2733/resources/$1;
    }

    location /recorder/api {
        rewrite /recorder/api/(.+) /$1 break;
        client_max_body_size 3m;

        proxy_read_timeout 300;
        proxy_pass http://recorder:3000;
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;
        proxy_set_header X-NginX-Proxy true;
        proxy_cache_bypass $http_upgrade;
    }

    location /broker/api {
           rewrite /broker/api/(.+) /$1 break;
           client_max_body_size 3m;

           proxy_read_timeout 300;
           proxy_pass http://broker:3001;
           proxy_redirect off;
           proxy_http_version 1.1;
           proxy_set_header Upgrade $http_upgrade;
           proxy_set_header Connection 'upgrade';
           proxy_set_header X-Real-IP $remote_addr;
           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
           proxy_set_header Host $host;
           proxy_set_header X-NginX-Proxy true;
           proxy_cache_bypass $http_upgrade;
    }

    location = /recorder/sessionstack.js {
        expires off;
        add_header 'Access-Control-Allow-Origin' '*';
        alias /usr/src/recorder/lib/sessionstack.js;
    }

    location /resources {
          add_header 'Access-Control-Allow-Origin' '*';
          add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS';
          add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';

          expires epoch;

          alias /usr/src/resources;
    }
  }
}
